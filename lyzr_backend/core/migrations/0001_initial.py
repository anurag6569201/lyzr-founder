# Generated by Django 5.2.4 on 2025-08-02 19:22

import django.core.validators
import django.db.models.deletion
import django.utils.timezone
import lyzr_backend.storages
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='SystemHealth',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('component', models.CharField(choices=[('LYZR_API', 'Lyzr API'), ('DATABASE', 'Database'), ('REDIS', 'Redis'), ('STORAGE', 'File Storage')], max_length=20)),
                ('status', models.CharField(choices=[('HEALTHY', 'Healthy'), ('DEGRADED', 'Degraded'), ('DOWN', 'Down')], max_length=10)),
                ('response_time', models.DurationField(blank=True, null=True)),
                ('error_message', models.TextField(blank=True)),
                ('checked_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'ordering': ['-checked_at'],
            },
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('full_name', models.CharField(blank=True, max_length=255)),
                ('onboarding_completed', models.BooleanField(default=False)),
                ('is_verified', models.BooleanField(default=False)),
                ('otp', models.CharField(blank=True, max_length=6, null=True)),
                ('otp_expiry_at', models.DateTimeField(blank=True, null=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Agent',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('lyzr_agent_id', models.CharField(blank=True, max_length=255, null=True, unique=True)),
                ('name', models.CharField(max_length=100)),
                ('is_active', models.BooleanField(default=True)),
                ('model', models.CharField(choices=[('gpt-4o-mini', 'GPT-4o Mini'), ('gpt-4-turbo', 'GPT-4 Turbo'), ('gpt-3.5-turbo', 'GPT-3.5 Turbo'), ('gemini/gemini-1.5-pro-latest', 'Gemini 1.5 Pro'), ('gemini/gemini-1.5-flash-latest', 'Gemini 1.5 Flash'), ('claude-3-sonnet-20240229', 'Claude 3 Sonnet'), ('claude-3-haiku-20240307', 'Claude 3 Haiku')], default='gpt-4o-mini', max_length=50)),
                ('description', models.TextField(blank=True, help_text='A brief description of what this agent does.')),
                ('agent_role', models.TextField(blank=True, default='You are a helpful customer support assistant.', help_text="Define the agent's persona or role (e.g., 'You are a friendly pirate...').")),
                ('agent_goal', models.TextField(blank=True, help_text='What is the primary objective of this agent?')),
                ('agent_instructions', models.TextField(blank=True, help_text='Provide detailed, step-by-step instructions for the agent.')),
                ('examples', models.TextField(blank=True, help_text="Optional few-shot examples in 'User: ...\\nAI: ...' format.", null=True)),
                ('temperature', models.FloatField(default=0.2, validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(2.0)])),
                ('top_p', models.FloatField(default=1.0, validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(1.0)])),
                ('widget_settings', models.JSONField(default=dict)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('max_tokens', models.IntegerField(default=1500, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(8000)])),
                ('timeout_seconds', models.IntegerField(default=30, validators=[django.core.validators.MinValueValidator(5), django.core.validators.MaxValueValidator(300)])),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='agents', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Conversation',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('end_user_id', models.CharField(help_text='Session or user identifier', max_length=255)),
                ('summary', models.TextField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user_agent', models.TextField(blank=True, help_text='Browser user agent')),
                ('ip_address', models.GenericIPAddressField(blank=True, null=True)),
                ('agent', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='conversations', to='core.agent')),
            ],
            options={
                'ordering': ['-updated_at'],
                'unique_together': {('agent', 'end_user_id')},
            },
        ),
        migrations.CreateModel(
            name='KnowledgeBase',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('lyzr_rag_id', models.CharField(blank=True, max_length=255, null=True, unique=True)),
                ('collection_name', models.CharField(help_text='Internal vector DB collection name', max_length=255, unique=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('description', models.TextField(blank=True, help_text='Description of the knowledge base content')),
                ('total_documents', models.IntegerField(default=0, help_text='Total number of indexed documents')),
                ('last_indexed_at', models.DateTimeField(blank=True, null=True)),
                ('agent', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='knowledge_base', to='core.agent')),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='KnowledgeSource',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('type', models.CharField(choices=[('URL', 'URL/Website'), ('FILE', 'File Upload'), ('TEXT', 'Raw Text')], max_length=10)),
                ('file_type', models.CharField(blank=True, choices=[('pdf', 'PDF Document'), ('docx', 'Word Document'), ('doc', 'Word Document (Legacy)'), ('txt', 'Text File'), ('csv', 'CSV File'), ('json', 'JSON File'), ('html', 'HTML File'), ('md', 'Markdown File')], max_length=10, null=True)),
                ('title', models.CharField(max_length=255)),
                ('content', models.TextField(blank=True, help_text='URL or raw text content')),
                ('file', models.FileField(blank=True, null=True, storage=lyzr_backend.storages.PrivateAzureStorage(), upload_to='knowledge_sources/')),
                ('status', models.CharField(choices=[('PENDING', 'Pending'), ('INDEXING', 'Indexing'), ('COMPLETED', 'Completed'), ('FAILED', 'Failed'), ('RETRY', 'Retrying')], default='PENDING', max_length=10)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('file_size', models.BigIntegerField(blank=True, help_text='File size in bytes', null=True)),
                ('processing_time', models.DurationField(blank=True, help_text='Time taken to process', null=True)),
                ('error_message', models.TextField(blank=True, help_text='Error details if indexing failed')),
                ('retry_count', models.IntegerField(default=0, help_text='Number of retry attempts')),
                ('indexed_at', models.DateTimeField(blank=True, null=True)),
                ('document_count', models.IntegerField(default=0, help_text='Number of documents extracted')),
                ('metadata', models.JSONField(default=dict, help_text='Additional metadata specific to source type')),
                ('knowledge_base', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sources', to='core.knowledgebase')),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Message',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('sender_type', models.CharField(choices=[('USER', 'User'), ('AI', 'AI Assistant'), ('SYSTEM', 'System')], max_length=10)),
                ('content', models.TextField()),
                ('feedback', models.CharField(blank=True, choices=[('POSITIVE', 'Positive'), ('NEGATIVE', 'Negative')], max_length=10, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('metadata', models.JSONField(default=dict, help_text='Additional message metadata')),
                ('conversation', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='messages', to='core.conversation')),
            ],
            options={
                'ordering': ['created_at'],
            },
        ),
        migrations.CreateModel(
            name='APIUsage',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('endpoint', models.CharField(help_text='API endpoint called', max_length=100)),
                ('request_count', models.IntegerField(default=1)),
                ('tokens_used', models.IntegerField(default=0)),
                ('response_time', models.DurationField(blank=True, null=True)),
                ('estimated_cost', models.DecimalField(decimal_places=6, default=0.0, max_digits=10)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('date', models.DateField(auto_now_add=True)),
                ('agent', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='api_usage', to='core.agent')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='api_usage', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-created_at'],
                'indexes': [models.Index(fields=['user', 'date'], name='core_apiusa_user_id_d64e41_idx'), models.Index(fields=['agent', 'date'], name='core_apiusa_agent_i_e6beea_idx')],
            },
        ),
    ]
